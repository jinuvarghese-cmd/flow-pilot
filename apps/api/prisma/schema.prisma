// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  image    String?
  emailVerified DateTime?
  role      UserRole @default(STAFF)
  tenantId  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  tenant Tenant? @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  workflows Workflow[] @relation("WorkflowCreator")
  clients Client[] @relation("ClientManager")
  workflowTemplates WorkflowTemplate[] @relation("TemplateCreator")

  // ðŸ‘‡ Required for NextAuth
  accounts Account[]
  sessions Session[]

  @@map("users")
}


// Tenant model
model Tenant {
  id      String @id @default(cuid())
  name    String
  slug    String @unique
  plan    PlanType @default(FREE)
  settings Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  users User[]
  workflows Workflow[]
  clients Client[]
  documents Document[]
  workflowExecutions WorkflowExecution[]
  workflowTemplates  WorkflowTemplate[]
  jobQueues         JobQueue[]

  @@map("tenants")
}

// Workflow model
model Workflow {
  id          String   @id @default(cuid())
  name        String
  description String?
  tenantId    String
  createdBy   String
  isActive    Boolean  @default(true)
  steps       Json     // Array of WorkflowStep
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  tenant Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  creator User @relation("WorkflowCreator", fields: [createdBy], references: [id])
  executions WorkflowExecution[]

  @@map("workflows")
}

// Client model
model Client {
  id       String       @id @default(cuid())
  tenantId String
  name     String
  email    String
  phone    String?
  status   ClientStatus @default(LEAD)
  metadata Json         @default("{}")
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  // Relations
  tenant Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  manager User? @relation("ClientManager", fields: [managerId], references: [id])
  managerId String?

  @@map("clients")
}

// Document model
model Document {
  id       String       @id @default(cuid())
  tenantId String
  name     String
  type     DocumentType
  url      String
  size     Int
  mimeType String
  metadata Json         @default("{}")
  tags     String[]     @default([])
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  // Relations
  tenant Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@map("documents")
}

// Enums
enum UserRole {
  ADMIN
  MANAGER
  STAFF
  CLIENT
}

enum PlanType {
  FREE
  PRO
  ENTERPRISE
}

enum ClientStatus {
  LEAD
  ACTIVE
  INACTIVE
  ARCHIVED
}

enum DocumentType {
  INVOICE
  CONTRACT
  PROPOSAL
  RECEIPT
  OTHER
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Workflow Execution model
model WorkflowExecution {
  id          String   @id @default(cuid())
  workflowId  String
  tenantId    String
  status      WorkflowExecutionStatus @default(PENDING)
  currentStep Int      @default(0)
  data        Json     @default("{}")
  result      Json?
  error       String?
  startedAt   DateTime @default(now())
  completedAt DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  workflow Workflow @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  tenant   Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@map("workflow_executions")
}

// Workflow Template model
model WorkflowTemplate {
  id          String   @id @default(cuid())
  name        String
  description String?
  category    String
  steps       Json     // Array of WorkflowStep
  isPublic    Boolean  @default(false)
  createdBy   String?
  tenantId    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  creator User?   @relation("TemplateCreator", fields: [createdBy], references: [id])
  tenant  Tenant? @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@map("workflow_templates")
}

// Job Queue model for tracking background jobs
model JobQueue {
  id        String   @id @default(cuid())
  jobId     String   @unique
  type      String
  data      Json
  status    JobStatus @default(PENDING)
  progress  Int      @default(0)
  result    Json?
  error     String?
  tenantId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  tenant Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@map("job_queues")
}

enum WorkflowExecutionStatus {
  PENDING
  RUNNING
  COMPLETED
  FAILED
  CANCELLED
}

enum JobStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
}